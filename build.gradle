/*
 * Created by brightSPARK Labs
 * www.brightsparklabs.com
 */

// -----------------------------------------------------------------------------
// PLUGINS
// -----------------------------------------------------------------------------

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'

    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Apply the spotbugs plugin for code quality
    id 'com.github.spotbugs' version '2.0.0'

    // Apply the jacoco plugin for test coverage
    id 'jacoco'

    // Apply the annotation processing plugins
    id "net.ltgt.apt" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"

    // Apply bintray plugin for publishing artifacts
    id "com.jfrog.bintray" version "1.8.4"
    id "maven-publish"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// -----------------------------------------------------------------------------
// PROJECT IDENTIFICATION
// -----------------------------------------------------------------------------

project.description  = 'Dropwizard bundle for trusting externally authenticated users'
project.ext.url      = 'https://github.com/brightsparklabs/dropwizard-external-auth-bundle'
project.ext.scm      = 'https://github.com/brightsparklabs/dropwizard-external-auth-bundle.git'
project.group        = 'com.brightsparklabs'
project.version      = 'git describe --always --dirty'.execute().text.trim()

// -----------------------------------------------------------------------------
// REPOSITORIES/DEPENDENCIES
// -----------------------------------------------------------------------------

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    def versions = [
            dropwizard       : '1.3.12',
            immutablesVersion: '2.7.4',
            jjwt             : '0.10.7',
    ]
    // These dependencies are found on compile classpath of this component and consumers.
    implementation(
            // General
            'com.google.guava:guava:27.0.1-jre',
            'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.9.9',
            'com.fasterxml.jackson.datatype:jackson-datatype-guava:2.4.0',
            "io.jsonwebtoken:jjwt-api:${versions.jjwt}",

            // Dropwizard
            "io.dropwizard:dropwizard-core:${versions.dropwizard}",
            "io.dropwizard:dropwizard-auth:${versions.dropwizard}",
    )

    compileOnly(
            "org.immutables:value:${versions.immutablesVersion}",
    )

    runtimeOnly(
            "io.jsonwebtoken:jjwt-impl:${versions.jjwt}",
            "io.jsonwebtoken:jjwt-jackson:${versions.jjwt}",
    )

    testImplementation(
            // Use the awesome Spock testing and specification framework even with Java
            'org.codehaus.groovy:groovy-all:2.5.6',
            'org.spockframework:spock-core:1.2-groovy-2.5',
            'junit:junit:4.12',

            // So that we can suppress some spotbugs reports
            'com.github.spotbugs:spotbugs-annotations:3.1.12',
    )

    annotationProcessor(
            "org.immutables:value:${versions.immutablesVersion}",
    )
}

// -----------------------------------------------------------------------------
// GENERATED CODE CONFIG
// -----------------------------------------------------------------------------

ext {
    generatedSourcesDir = 'build/generated/source/apt/main'
}

dependencies {
    // We add this so that Immutables will annotate its generated classes with
    // @SuppressFBWarnings, and thus avoid Findbugs errors for those generated classes.
    compileOnly group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
}

sourceSets {
    main.java.srcDirs += generatedSourcesDir
}

// -----------------------------------------------------------------------------
// GENERATE CODE QUALTIY REPORT (via spotbugs)
// -----------------------------------------------------------------------------

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// -----------------------------------------------------------------------------
// GENERATE CODE COVERAGE REPORT (via jacoco)
// -----------------------------------------------------------------------------

jacocoTestReport {
    reports {
        html.enabled = true
    }
}

// -----------------------------------------------------------------------------
// PUBLISH ARTIFACTS (via bintray)
// -----------------------------------------------------------------------------

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['Publication']
    override = true
    publish = true
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'brightsparklabs'
        licenses = ['MIT']
        vcsUrl = project.ext.url
        version {
            name = project.version
            vcsTag = project.version
            released = new Date()
        }
    }
}


// Include javadoc and sources (requirements for publishing to Maven Central)
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

def pomConfig = {
    name project.name
    packaging 'jar'
    description project.description
    url project.url

    scm {
        connection project.scm
        developerConnection project.scm
        url project.scm
    }

    licenses {
        license {
            name 'MIT License'
            url 'http://www.opensource.org/licenses/mit-license.php'
        }
    }

    developers {
        developer {
            id 'brightsparklabs'
            name 'brightSPARK Labs'
            email 'enquire@brightsparklabs.com'
        }
    }
}

publishing {
    publications {
        Publication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version
            pom.withXml {
                def root = asNode()
                root.children().last() + pomConfig
            }
        }
    }
}
